//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TBEIWeb.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PronestEntities : DbContext
    {
        public PronestEntities()
            : base("name=PronestEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<Nest_Tester_Result> Nest_Tester()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nest_Tester_Result>("Nest_Tester");
        }
    
        public virtual ObjectResult<Nests_Get_Result> Nests_Get(Nullable<int> nestID, string machineName, string rgid, string cNCFile, Nullable<bool> incomplete, Nullable<int> progID)
        {
            var nestIDParameter = nestID.HasValue ?
                new ObjectParameter("NestID", nestID) :
                new ObjectParameter("NestID", typeof(int));
    
            var machineNameParameter = machineName != null ?
                new ObjectParameter("MachineName", machineName) :
                new ObjectParameter("MachineName", typeof(string));
    
            var rgidParameter = rgid != null ?
                new ObjectParameter("rgid", rgid) :
                new ObjectParameter("rgid", typeof(string));
    
            var cNCFileParameter = cNCFile != null ?
                new ObjectParameter("CNCFile", cNCFile) :
                new ObjectParameter("CNCFile", typeof(string));
    
            var incompleteParameter = incomplete.HasValue ?
                new ObjectParameter("incomplete", incomplete) :
                new ObjectParameter("incomplete", typeof(bool));
    
            var progIDParameter = progID.HasValue ?
                new ObjectParameter("ProgID", progID) :
                new ObjectParameter("ProgID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nests_Get_Result>("Nests_Get", nestIDParameter, machineNameParameter, rgidParameter, cNCFileParameter, incompleteParameter, progIDParameter);
        }
    
        public virtual ObjectResult<Parts_Get_Result> Parts_Get(string partName)
        {
            var partNameParameter = partName != null ?
                new ObjectParameter("PartName", partName) :
                new ObjectParameter("PartName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Parts_Get_Result>("Parts_Get", partNameParameter);
        }
    }
}
